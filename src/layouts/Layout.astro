---
import AdRemoveMenuReact from 'src/components/AdRemoveMenuReact';
import BasicAdReact from 'src/components/BasicAdReact';
import CheckRemoveAd from 'src/components/CheckRemoveAd';
import Footer from 'src/components/Footer.astro';
import MenuBody from 'src/components/MenuBody.astro';
import MenuBtn from 'src/components/MenuBtn.astro';
import 'src/styles/index.css';
import { css } from 'styled-system/css';

interface Props {
  title: string;
  mainClassName?: string;
  is404?: boolean;
  description: string;
}

const { title, mainClassName, is404, description } = Astro.props;
const separatorW = '3rem';

const { pathname } = Astro.url;
const isPrivacypolicy = pathname.includes('privacypolicy');
const viewAd = !isPrivacypolicy && !is404;

//メインヴィジュアルのプリロード（Lighthouse で注意されるので実装したが、体感だと遅く感じるので保留）
// const pathName = Astro.url.pathname;
// const isTop = pathName === '/';
// const featureName = isTop
//   ? 'top'
//   : featureNames.reduce((accu, featureName) => {
//       const featureReg = new RegExp(featureName.replace('_', '-'));
//       const featurePath = pathName.match(featureReg);
//       if (!featurePath) return accu;
//       accu = featurePath[0].replace('-', '_');
//       return accu;
//     }, '');
// console.log(featureName);
// const featureData = createFeatureData(featureName as FeatureName);
---

<!doctype html>
<html
  lang="ja"
  class={css({
    scrollBehavior: 'smooth',
    '&:has(dialog[open])': { overflow: 'hidden' }
  })}>
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content={description}
    />
    <meta
      name="viewport"
      content="width=device-width"
    />
    {
      is404 && (
        <meta
          name="robots"
          content="noindex"
        />
      )
    }
    <link
      rel="icon"
      type="image/svg+xml"
      href="/favicon.svg"
    />
    <meta
      name="generator"
      content={Astro.generator}
    />
    <meta
      name="viewport"
      content="width=device-width,initial-scale=1"
    />
    <link
      rel="sitemap"
      href="/sitemap-index.xml"
    />
    <!-- <link
      rel="preload"
      as="image"
      type="image/webp"
      href={`/images/${featureData.imagePath}`}
    /> -->
    <title>{title}</title>
  </head>
  <body
    class={css({
      pos: 'relative',
      maxW: '100%',
      minH: '100svh',
      fontFamily: 'notoSansJP, system-ui',
      color: '{colors.text}',
      bgColor: '{colors.bg}',
      overflowX: 'clip',
      fontSize: '16px',
      fontWeight: 400,
      lineHeight: 1.5,
      textAlign: 'justify'
    })}>
    <MenuBtn
      class={css({
        spToTab: {
          d: 'grid',
          gridTemplateColumns: 'auto auto',
          alignItems: 'start',
          '&::after': {
            content: '"Menu"',
            d: 'block',
            pt: '.5rem',
            pr: '.25rem',
            fontSize: '.75rem',
            fontWeight: '700',
            lineHeight: 1
          }
        },
        tab: { d: 'none' }
      })}
    />
    <div
      class={css({
        tab: {
          d: 'grid',
          gridTemplateColumns: `minmax(320px, 468px) ${separatorW} minmax(320px, 468px)`,
          justifyContent: 'start'
        }
      })}>
      <MenuBody
        viewAd={viewAd}
        class={css({ tab: { pos: 'sticky', top: 0, left: 0, d: 'block', order: 3 } })}
      />
      <div
        class={css({
          //セパレーター
          d: 'none',
          tab: {
            d: 'block',
            pos: 'sticky',
            top: 0,
            left: 0,
            order: 2,
            w: separatorW,
            h: '100svh',
            bgColor: '{colors.bg}',
            '&::before': {
              content: '""',
              d: 'block',
              pos: 'absolute',
              inset: 0,
              bgImage: 'url(/images/bg-pattern-light.png)',
              bgSize: '6rem',
              bgPos: 'center',
              opacity: '0.15'
            }
          },
          pc: {
            w: '3rem',
            '&::before': {
              bgSize: '6rem'
            }
          }
        })}>
      </div>
      <slot name="before-main" />
      <main class={mainClassName}>
        <slot />
        {viewAd && <BasicAdReact client:only="react" />}
      </main>
      <slot name="after-main" />
    </div>
    {
      viewAd && (
        <>
          <AdRemoveMenuReact client:only="react" />
          <CheckRemoveAd client:only="react" />
        </>
      )
    }
  </body>
  <slot name="after-body" />
  <Footer class={css({ mt: '4rem' })} />
</html>
